version: "3.7"
services:
  rocketchat-mongo:
    image: mongo
    networks:
      - rocketchat
    command: mongod --replSet rocketchat
    volumes:
      - ./rocketchat/database:/data/db
      - ./rocketchat/dump:/dump
    deploy:
      restart_policy:
        condition: any

  rocketchat-mongo-replicator:
    image: mongo
    networks:
      - rocketchat
    command: 'mongo ${DOCKER_STACK_NAME}_rocketchat-mongo/rocketchat --eval "rs.initiate({ _id: ''rocketchat'', members: [ { _id: 0, host: ''${DOCKER_STACK_NAME}_rocketchat-mongo:27017'' } ]})"'
    deploy:
      restart_policy:
        condition: on-failure

  rocketchat-app:
    image: rocketchat/rocket.chat
    command: node main.js
    networks:
      - rocketchat
      - traefik
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.rocketchat.entrypoints=plainhttp"
        - "traefik.http.services.rocketchat.loadbalancer.server.port=3000"
        - 'traefik.http.routers.rocketchat.rule=Host("rocketchat.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}")'
        - "traefik.http.middlewares.rocketchat-force-secure.redirectscheme.scheme=https"
        - "traefik.http.routers.rocketchat.middlewares=rocketchat-force-secure"
        - "traefik.http.routers.rocketchat.service=rocketchat"
        - "traefik.http.routers.rocketchat-https.entrypoints=encryptedhttp"
        - 'traefik.http.routers.rocketchat-https.rule=Host("rocketchat.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}")'
        - "traefik.http.routers.rocketchat-https.service=rocketchat"
        - "traefik.http.routers.rocketchat-https.tls=true"
        - "traefik.http.services.rocketchat-https.loadbalancer.server.port=3000"
    volumes:
      - ./rocketchat/uploads:/app/uploads
      - ./traefik/ssl:/certs:ro
    environment:
      - PORT=3000
      - ROOT_URL=https://rocketchat.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}
      - MONGO_URL=mongodb://${DOCKER_STACK_NAME}_rocketchat-mongo:27017/rocketchat
      - MONGO_OPLOG_URL=mongodb://${DOCKER_STACK_NAME}_rocketchat-mongo:27017/local

  rocketchat-hubot:
    image: rocketchat/hubot-rocketchat:latest
    networks:
     - rocketchat
    deploy:
      restart_policy:
        condition: any
    environment:
      - ROCKETCHAT_URL=${DOCKER_STACK_NAME}_rocketchat-app:3000
      - ROCKETCHAT_ROOM=GENERAL
      - ROCKETCHAT_USER=${ROCKETCHAT_BOT_USERNAME}
      - ROCKETCHAT_PASSWORD=${ROCKETCHAT_BOT_PASSWORD}
      - BOT_NAME=bot
      # you can add more scripts as you'd like here, they need to be installable by npm
      - EXTERNAL_SCRIPTS=hubot-help,hubot-seen,hubot-links,hubot-diagnostics
    volumes:
      - ./rocketchat/hubot-scripts:/home/hubot/scripts
    ports:
      - 3001:8080
## this swarm listen port is used to expose the hubot service's internal port
## for notifications to the service on port 3001, e.g. for hubot-jenkins-notifier
## it should really be forwarded through traefik over tcp
## (really, only traefik should need to have a ports section
## except traefik doesn't route UDP traffic - yet.  So we leave it as an example.)

  traefik:
    image: traefik
    command:
      - "--accesslog=true"
      - "--api.dashboard=true"
      - "--certificatesresolvers.cloudflarecerts.acme.email=${LETS_ENCRYPT_EMAIL_ADDRESS}"
      - "--certificatesresolvers.cloudflarecerts.acme.storage=/acme.json"
## watch out for Let's Encrypt rate limiting
## that's why we default to the staging server, after all
## comment out the 'caserver' line below to pull trusted certs if you want them
      - "--certificatesresolvers.cloudflarecerts.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.cloudflarecerts.acme.dnschallenge=true"
      - "--certificatesresolvers.cloudflarecerts.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cloudflarecerts.acme.dnschallenge.resolvers=1.1.1.1:53, 1.0.0.1:53"
      - "--entrypoints.plainhttp.address=:80"
      - "--entrypoints.encryptedhttp.address=:443"
      - "--log.level=DEBUG"
      - "--log.format=json"
      - "--accesslog=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=${DOCKER_STACK_NAME}_traefik"
      - "--providers.docker.swarmmode=true"
      - "--providers.docker.watch=true"
    networks:
      - traefik
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - ./logs/traefik://var/log/traefik
      - ./traefik/acme.json:/acme.json
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN_WITH_DOMAIN_EDIT_PRIVILEGES}
      - CF_ZONE_API_TOKEN=${CLOUDFLARE_API_TOKEN_WITH_DOMAIN_EDIT_PRIVILEGES}
    deploy:
      restart_policy:
        condition: any
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.entrypoints=plainhttp"
        - 'traefik.http.routers.traefik.rule=Host("traefik.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}") && (PathPrefix("/api") || PathPrefix("/dashboard"))'
        - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_USER}:${HASHED_TRAEFIK_PASSWORD}"
        - "traefik.http.routers.traefik-https.middlewares=traefik-auth"
        - "traefik.http.middlewares.traefik-force-secure.redirectscheme.scheme=https"
        - "traefik.http.routers.traefik.middlewares=traefik-force-secure"
        - "traefik.http.routers.traefik-https.entrypoints=encryptedhttp"
        - 'traefik.http.routers.traefik-https.rule=Host("traefik.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}")'
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik-https.service=api@internal"
        - "traefik.http.routers.traefik-https.tls=true"
        - "traefik.http.routers.dashboard.tls.certresolver=cloudflarecerts"
        - "traefik.http.routers.dashboard.tls.domains[0].main=${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}"
        - "traefik.http.routers.dashboard.tls.domains[0].sans=*.${DOMAIN_WITH_DNS_HANDLED_BY_CLOUDFLARE}"
      placement:
        constraints:
          - node.role == manager

  traefik-ssl-exporter:
    image: ldez/traefik-certs-dumper:latest
    networks:
      - traefik
    volumes:
      - ./logs/traefik:/var/log/traefik
      - ./traefik/acme.json/:/acme.json
      - ./traefik/ssl:/output
    command: >
      file
      --watch
      --version v2
      --dest /output
    deploy:
      restart_policy:
        condition: on-failure

networks:
  rocketchat:
    driver: overlay
  traefik:
    driver: overlay
